if (Open3D_USE_NATIVE_DEPENDENCY_BUILD)
	message(STATUS "Finding dependencies of Open3D")
	message(STATUS "Dependencies are built from source if they are not found in the system")
	find_package(GLEW)
	if (GLEW_FOUND)
	    message(STATUS "Use native build of GLEW")
	else (GLEW_FOUND)
		message(STATUS "Build GLEW from source")
		add_subdirectory(glew)
	endif (GLEW_FOUND)

	find_package(JPEG)
	if (JPEG_FOUND)
	    message(STATUS "Use native build of libjpeg")
	else (JPEG_FOUND)
		message(STATUS "Build libjpeg from source")
		add_subdirectory(libjpeg)
	endif (JPEG_FOUND)

	find_package(PNG)
	if (PNG_FOUND)
	    message(STATUS "Use native build of libpng")
	else (PNG_FOUND)
		message(STATUS "Build libpng from source")
		add_subdirectory(zlib)
		add_subdirectory(libpng)
	endif (PNG_FOUND)

	find_package(PkgConfig)
	if (PKGCONFIG_FOUND)
		pkg_search_module(GLFW glfw3)
		find_package(OpenGL)
		if (GLFW_FOUND AND OPENGL_FOUND)
			message(STATUS "Use native build of glfw")
			if (APPLE)
				find_library(COCOA_FRAMEWORK Cocoa)
			    find_library(IOKIT_FRAMEWORK IOKit)
			    find_library(CORE_FOUNDATION_FRAMEWORK CoreFoundation)
			    find_library(CORE_VIDEO_FRAMEWORK CoreVideo)
			    mark_as_advanced(COCOA_FRAMEWORK
			                     IOKIT_FRAMEWORK
			                     CORE_FOUNDATION_FRAMEWORK
			                     CORE_VIDEO_FRAMEWORK)
			    list(APPEND GLFW_LIBRARIES "${COCOA_FRAMEWORK}"
			                               "${OPENGL_gl_LIBRARY}"
			                               "${IOKIT_FRAMEWORK}"
			                               "${CORE_FOUNDATION_FRAMEWORK}"
			                               "${CORE_VIDEO_FRAMEWORK}")
			else (APPLE)
				set(GLFW_INCLUDE_DIRS "${GLFW_INCLUDE_DIRS} ${OPENGL_INCLUDE_DIR}")
				set(GLFW_LIBRARIES "${GLFW_LIBRARIES} ${OPENGL_gl_LIBRARY}")
			endif (APPLE)
		else (GLFW_FOUND AND OPENGL_FOUND)
			message(STATUS "Build glfw from source")
			add_subdirectory(GLFW)
		endif (GLFW_FOUND AND OPENGL_FOUND)
	else (PKGCONFIG_FOUND)
		message(STATUS "Build glfw from source")
		add_subdirectory(GLFW)
	endif (PKGCONFIG_FOUND)

	add_subdirectory(jsoncpp)
	add_subdirectory(tinyfiledialogs)

	if(Open3D_BUILD_LIBREALSENSE)
		message(STATUS "Build librealsense from source")
		add_subdirectory(librealsense)
	endif(Open3D_BUILD_LIBREALSENSE)

	if (Open3D_BUILD_PYTHON_BINDING)
		add_subdirectory(pybind11)
	endif(Open3D_BUILD_PYTHON_BINDING)
else (Open3D_USE_NATIVE_DEPENDENCY_BUILD)
	message(STATUS "Build GLEW from source")
	add_subdirectory(glew)
	message(STATUS "Build libjpeg from source")
	add_subdirectory(libjpeg)
	message(STATUS "Build libpng from source")
	add_subdirectory(zlib)
	add_subdirectory(libpng)
	message(STATUS "Build glfw from source")
	add_subdirectory(GLFW)
	add_subdirectory(jsoncpp)
	add_subdirectory(tinyfiledialogs)

	if(Open3D_BUILD_LIBREALSENSE)
		message(STATUS "Build librealsense from source")
		add_subdirectory(librealsense)
	endif(Open3D_BUILD_LIBREALSENSE)

	if (Open3D_BUILD_PYTHON_BINDING)
		add_subdirectory(pybind11)
	endif(Open3D_BUILD_PYTHON_BINDING)
endif(Open3D_USE_NATIVE_DEPENDENCY_BUILD)

# pop everything to root
set(GLEW_INCLUDE_DIRS ${GLEW_INCLUDE_DIRS} PARENT_SCOPE)
set(GLEW_LIBRARIES ${GLEW_LIBRARIES} PARENT_SCOPE)
set(GLFW_INCLUDE_DIRS ${GLFW_INCLUDE_DIRS} PARENT_SCOPE)
set(GLFW_LIBRARIES ${GLFW_LIBRARIES} PARENT_SCOPE)
set(JPEG_INCLUDE_DIR ${JPEG_INCLUDE_DIR} PARENT_SCOPE)
set(JPEG_LIBRARIES ${JPEG_LIBRARIES} PARENT_SCOPE)
set(PNG_INCLUDE_DIRS ${PNG_INCLUDE_DIRS} PARENT_SCOPE)
set(PNG_LIBRARIES ${PNG_LIBRARIES} PARENT_SCOPE)
