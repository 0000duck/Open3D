.. _getting_started:

Getting Started
#######################

This guide gets you started programming with Open3D. The basic tools you need are `git <https://git-scm.com/>`_, `CMake <https://cmake.org/>`_, and **a non-ancient C++ compiler** that supports C++11, such as gcc 4.8+, Visual Studio 2015+, or XCode 8.0+. If you want to install the python binding, make sure you have python 2.7 or 3.5+ installed.

.. _getting_started_compilation:

Compiling from source
========================

Download source code from the `repository <https://github.com/IntelVCL/Open3D>`_.

Ubuntu
-----------

Run the following commands to install the dependencies and use CMake to build the project.

.. code-block:: bash

    scripts/install-deps-ubuntu.sh
    mkdir build
    cd build
    cmake ../src
    make -j12

OS X
-----------

To compile from the terminal, follow the last section but replace ``install-deps-ubuntu.sh`` with ``install-deps-osx.sh``. We use `homebrew <https://brew.sh/>`_ to manage dependencies. Follow the instructions from the script.

Alternatively, if you want to use Xcode IDE, run:

.. code-block:: bash

    scripts/install-deps-osx.sh
    mkdir build-xcode
    cd build-xcode
    cmake -G Xcode ../src
    open Open3D.xcodeproj/

Windows
-----------

On Windows, only **Visual Studio 2015** and newer are supported since Open3D relies heavily on C++11 language features. For easy compilation, we have included source code of all dependent libraries in the ``src/External`` folder.


You can use the CMake GUI as shown in the following figure. Specify the directories, click ``Configure`` and choose the correct Visual Studio version (e.g., ``Visual Studio 14 2015 Win64``), then click ``Generate``. This will create an ``Open3D.sln`` file in your build directory.

.. image:: _static/cmake_windows.png
    :width: 400px
    :height: 300px

Alternatively, this file can be generated by calling CMake from the console:

.. code-block:: bash

    mkdir build
    cd build
    cmake -G "Visual Studio 14 2015 Win64" ../src

Open ``Open3D.sln`` file with Visual Studio, change the build type to ``Release``, then rebuild the ``ALL_BUILD`` target.
